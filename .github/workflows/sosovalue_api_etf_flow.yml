name: SoSoValue ETF Flow (API)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0,3,6,9 * * *"   # UTC 0/3/6/9 = JST 9/12/15/18

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ← この下に追加できる！
      - name: Test inline python
        run: |
          python - <<'PY'
          print("hello from inline python")
          PY

      - name: Restore send state
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: sosovalue_state.json
          key: sosovalue-state-${{ github.run_id }}
          restore-keys: |
            sosovalue-state-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests matplotlib


      # 昨日(JST)の確定チェック（BTC+必要ならETH）
      - name: Check SoSoValue confirmation (yesterday JST)
        id: confirm
        env:
          SOSO_API_KEY: ${{ secrets.SOSO_API_KEY }}
          SEND_ETH: "1"   # ETHも見たい時は "1"
        run: |
          python - <<'PY'
          import os, requests, datetime as dt
      
          API = 'https://api.sosovalue.xyz/openapi/v2/etf/historicalInflowChart'
          headers = {
              'x-soso-api-key': os.environ['SOSO_API_KEY'],
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'User-Agent': 'etf-flow-confirm/1.0'
          }
      
          def extract_rows(payload):
              """payload から履歴配列を安全に取り出す（data が dict/list どちらでもOK）"""
              if isinstance(payload, list):
                  return payload
              if isinstance(payload, dict):
                  data = payload.get('data')
                  # data が list
                  if isinstance(data, list):
                      return data
                  # data が dict
                  if isinstance(data, dict):
                      for k in ('list','records','items','rows'):
                          v = data.get(k)
                          if isinstance(v, list):
                              return v
                  # トップレベルに list 系キー
                  for k in ('list','records','items','rows'):
                      v = payload.get(k)
                      if isinstance(v, list):
                          return v
              return []
      
          def last_hist_date(kind: str):
              r = requests.post(API, headers=headers, json={'type': kind}, timeout=30)
              r.raise_for_status()
              rows = extract_rows(r.json() or {})
              dates = []
              for it in rows:
                  d = it.get('date')
                  if not d:
                      continue
                  try:
                      dates.append(dt.datetime.strptime(d, '%Y-%m-%d').date())
                  except Exception:
                      pass
              return max(dates) if dates else None
      
          jst = dt.timezone(dt.timedelta(hours=9))
          yday = (dt.datetime.now(jst).date() - dt.timedelta(days=1))
      
          latests = []
          ld_btc = last_hist_date('us-btc-spot')
          if ld_btc: latests.append(ld_btc)
      
          if os.getenv('SEND_ETH', '1') == '1':
              ld_eth = last_hist_date('us-eth-spot')
              if ld_eth: latests.append(ld_eth)
      
          latest = max(latests) if latests else None
          confirmed = (latest is not None) and (latest >= yday)
      
          print(f"[confirm] yday={yday}, latest={latest}, confirmed={confirmed}")
      
          # 後続ステップに渡す
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"confirmed={'true' if confirmed else 'false'}\n")
              f.write(f"latest={latest}\n")
              f.write(f"yday={yday}\n")
          PY



      - name: Run SoSoValue API Sentry
        if: steps.confirm.outputs.confirmed == 'true'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          SOSO_API_KEY: ${{ secrets.SOSO_API_KEY }}
          # 銘柄別API（設定すれば内訳を取得。未設定なら集計のみ）
          SOSO_FUNDS_API: ${{ secrets.SOSO_FUNDS_API }}
          SEND_ETH: "1"
          SHOW_TOP_N: "24"
          # 月上限（デフォ1000）を変えたいときだけ指定
          MAX_CALLS_PER_MONTH: "1000"
          # FORCE_SEND は使わない（確定時のみ送信するため）
        run: |
          set -euxo pipefail
          python -u sosovalue_api_etf_flow.py

      - name: Upload payload dump (if any)
        if: always() && hashFiles('last_payload.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: sosovalue-last-payload-${{ github.run_attempt }}
          path: last_payload.json

      - name: Save send state
        if: ${{ always() && hashFiles('sosovalue_state.json') != '' }}
        uses: actions/cache/save@v4
        with:
          path: sosovalue_state.json
          key: sosovalue-state-${{ github.run_id }}

      - name: Run cumulative chart (BTC+ETH)
        if: steps.confirm.outputs.confirmed == 'true'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          SOSO_API_KEY: ${{ secrets.SOSO_API_KEY }}
          SOSO_CLIENT_ID: ${{ secrets.SOSO_CLIENT_ID }}
          SOSO_CLIENT_SECRET: ${{ secrets.SOSO_CLIENT_SECRET }}
        run: |
          python -u sosovalue_etf_cum_chart.py
